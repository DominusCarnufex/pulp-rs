use super::super::run;

#[test]
#[cfg(any(feature = "v0_x", feature = "v0_1_x", feature = "v0_1_0"))]
fn run_v0_1_0() {
    let vec = vec![
        0x50, 0x55, 0x4c, 0x50,
        0x00, 0x01, 0x00,
        0x00,
        0x57, 0x6e, 0xbc, 0xfa,
        0xc3, 0xe7, 0x2d, 0xcb, 0x23, 0xc5, 0x15, 0x20,
        0xae, 0x19, 0x62, 0x64, 0x5b, 0x9a, 0x8a, 0x9d,
        0x2d, 0x00, 0x00, 0x00,
        0x01,
        0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x02, 0x00,
          0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,    
        0x0b, 0x00, 0x03, 0x00,
          0x0a, 0x00, 0x00,
          0x0a, 0x01, 0x00,
          0x30
    ];

    match run(&vec) {
        Ok(_)  => {},
        Err(e) => panic!("{}", e)
    };
}

#[test]
#[should_panic(expected = "taille insuffisante")]
fn too_small()  {
    let vec = vec![0x50, 0x75, 0x4c, 0x50];
    match run(&vec) {
        Ok(_)  => {},
        Err(e) => panic!("{}", e)
    }
}

#[test]
#[should_panic(expected = "condensat MD5 incorrect")]
fn bad_md5()    {
    let vec = vec![
        0x50, 0x55, 0x4c, 0x50,
        0x00, 0x01, 0x00,
        0x00,
        0x57, 0x6e, 0xbc, 0xfa,
        0x17, 0x6d, 0x7d, 0x7f, 0xde, 0x3f, 0x69, 0x00,
        0xc8, 0x7f, 0x64, 0x77, 0x11, 0xc3, 0xab, 0xb2,
        0x2d, 0x00, 0x00, 0x00,
        0x01,
        0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x02, 0x00,
          0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,    
        0x0b, 0x00, 0x03, 0x00,
          0x0a, 0x00, 0x00,
          0x0a, 0x01, 0x00,
          0x30
    ];
    match run(&vec) {
        Ok(_)  => {},
        Err(e) => panic!("{}", e)
    }
}

#[test]
#[cfg(any(feature = "v0_x", feature = "v0_1_x", feature = "v0_1_0"))]
fn good_version_v0_1_0()    {
    let vec = vec![
        0x50, 0x55, 0x4c, 0x50,
        0x00, 0x01, 0x00,
        0x00,
        0x57, 0x6e, 0xbc, 0xfa,
        0xc3, 0xe7, 0x2d, 0xcb, 0x23, 0xc5, 0x15, 0x20,
        0xae, 0x19, 0x62, 0x64, 0x5b, 0x9a, 0x8a, 0x9d,
        0x2d, 0x00, 0x00, 0x00,
        0x01,
        0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x02, 0x00,
          0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,    
        0x0b, 0x00, 0x03, 0x00,
          0x0a, 0x00, 0x00,
          0x0a, 0x01, 0x00,
          0x30
    ];

    match run(&vec) {
        Ok(_)  => {},
        Err(e) => panic!("{}", e)
    };
}

#[test]
#[cfg(not(any(feature = "v0_x", feature = "v0_1_x", feature = "v0_1_0")))]
#[should_panic(expected = "bytecode non supportÃ©")]
fn bad_version_v0_1_0() {
    let vec = vec![
        0x50, 0x55, 0x4c, 0x50,
        0x00, 0x01, 0x00,
        0x00,
        0x57, 0x6e, 0xbc, 0xfa,
        0xc3, 0xe7, 0x2d, 0xcb, 0x23, 0xc5, 0x15, 0x20,
        0xae, 0x19, 0x62, 0x64, 0x5b, 0x9a, 0x8a, 0x9d,
        0x2d, 0x00, 0x00, 0x00,
        0x01,
        0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x02, 0x00,
          0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,    
        0x0b, 0x00, 0x03, 0x00,
          0x0a, 0x00, 0x00,
          0x0a, 0x01, 0x00,
          0x30
    ];

    match run(&vec) {
        Ok(_)  => {},
        Err(e) => panic!("{}", e)
    };
}

#[test]
#[should_panic(expected = "Version inconnue du bytecode")]
fn bad_version()    {
    let vec = vec![
        0x50, 0x55, 0x4c, 0x50,
        0x00, 0x00, 0x01,
        0x00,
        0x57, 0x6e, 0xbc, 0xfa,
        0xc3, 0xe7, 0x2d, 0xcb, 0x23, 0xc5, 0x15, 0x20,
        0xae, 0x19, 0x62, 0x64, 0x5b, 0x9a, 0x8a, 0x9d,
        0x2d, 0x00, 0x00, 0x00,
        0x01,
        0x00, 0x00, 0x00,
        0x04, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x02, 0x00,
          0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,    
        0x0b, 0x00, 0x03, 0x00,
          0x0a, 0x00, 0x00,
          0x0a, 0x01, 0x00,
          0x30
    ];
    match run(&vec) {
        Ok(_)  => {},
        Err(e) => panic!("{}", e)
    }
}
