use super::super::*;
use super::super::segments::Const;
use super::super::execute::Environment;

// Un programme complet utilisant la version 0.1.0 du
// *bytecode*. Il réalise l’addition de 1 et 2.
#[test]
fn run_basic()  {
    let vec = vec![
        0x50, 0x55, 0x4c, 0x50,
        0x00, 0x01, 0x00,
        0x00,
        0x57, 0x6e, 0xbc, 0xfa,
        0x32, 0x00, 0x7b, 0xf9, 0x73, 0xca, 0x8b, 0x5f,
        0x09, 0xe0, 0x54, 0x09, 0x3a, 0xab, 0xf2, 0x60,
        0x32, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00,
        0x04, 0x6d, 0x61, 0x69, 0x6e,
        0x04, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x02, 0x00,
          0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,    
        0x0b, 0x00, 0x03, 0x00,
          0x0a, 0x00, 0x00,
          0x0a, 0x01, 0x00,
          0x30
    ];

    match run(&vec) {
        PulpResult::Ok(a)      => {
            assert_eq!(Const::Int(3), a.unwrap());
        },
        PulpResult::ProgErr(_) =>
            panic!("Programme avorté qui n’aurait pas dû"),
        PulpResult::CompErr(e) => panic!("{}", e)
    }
}

// Un programme complet utilisant la version 0.1.0 du
// *bytecode*. Il avorte en cours de route.
#[test]
fn run_abort()  {
    let vec = vec![
        0x50, 0x55, 0x4c, 0x50,
        0x00, 0x01, 0x00,
        0x00,
        0x57, 0x6e, 0xbc, 0xfa,
        0x32, 0x00, 0x7b, 0xf9, 0x73, 0xca, 0x8b, 0x5f,
        0x09, 0xe0, 0x54, 0x09, 0x3a, 0xab, 0xf2, 0x60,
        0x32, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00,
        0x04, 0x6d, 0x61, 0x69, 0x6e,
        0x04, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x02, 0x00,
          0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,    
        0x0b, 0x00, 0x03, 0x00,
          0x0a, 0x00, 0x00,
          0x60, 0x00, 0x00,
          0x30
    ];

    match run(&vec) {
        PulpResult::Ok(_) =>
            panic!("Programme réussi qui n’aurait pas dû"),

        PulpResult::ProgErr((err, (sta, env))) => {
            assert_eq!(0,                        err);
            assert_eq!(vec![Const::Int(1)],      sta);
            assert_eq!(vec![Environment::new()], env);
        },

        PulpResult::CompErr(e) => panic!("{}", e)
    }
}

// Un programme complet utilisant la version 0.1.0 du
// *bytecode*. Il n’y a cependant pas de segment `main`,
// donc pas de point d’entrée au programme.
#[test]
#[should_panic(expected = "aucun segment `main` disponible")]
fn no_main()    {
    let vec = vec![
        0x50, 0x55, 0x4c, 0x50,
        0x00, 0x01, 0x00,
        0x00,
        0x57, 0x6e, 0xbc, 0xfa,
        0x6b, 0xb1, 0x71, 0xa1, 0x87, 0xd6, 0x98, 0x45,
        0x1f, 0x88, 0x48, 0x31, 0xef, 0xfd, 0x65, 0x4f,
        0x2f, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00,
        0x01, 0x6d,
        0x04, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x02, 0x00,
          0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,    
        0x0b, 0x00, 0x03, 0x00,
          0x0a, 0x00, 0x00,
          0x0a, 0x01, 0x00,
          0x30
    ];

    match run(&vec) {
        PulpResult::Ok(_)      => {},
        PulpResult::ProgErr(_) => {},
        PulpResult::CompErr(e) => panic!("{}", e)
    }
}

